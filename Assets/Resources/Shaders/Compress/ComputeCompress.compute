#include "BCCompress.hlsl"
#include "ETCCompress.hlsl"
//#pragma enable_d3d11_debug_symbols
#pragma multi_compile _COMPRESS_BC3 _COMPRESS_ETC2

uint _Size;
Texture2D<float4> _SrcTexture;
SamplerState sampler_SrcTexture;
#ifdef _COMPRESS_BC3
RWTexture2D<uint4> _DstTexture;
#else
RWTexture2D<min16uint4> _DstTexture;
#endif

void ReadBlockRGBA(Texture2D<float4> SourceTexture, SamplerState TextureSampler, float2 UV, float2 TexelUVSize,
                   out float3 Block[16], out float BlockA[16])
{
    {
        float4 Red = SourceTexture.GatherRed(TextureSampler, UV);
        float4 Green = SourceTexture.GatherGreen(TextureSampler, UV);
        float4 Blue = SourceTexture.GatherBlue(TextureSampler, UV);
        float4 Alpha = SourceTexture.GatherAlpha(TextureSampler, UV);
        Block[0] = float3(Red.a, Green.a, Blue.a);
        Block[1] = float3(Red.b, Green.b, Blue.b);
        Block[4] = float3(Red.r, Green.r, Blue.r);
        Block[5] = float3(Red.g, Green.g, Blue.g);
        BlockA[0] = Alpha.a;
        BlockA[1] = Alpha.b;
        BlockA[4] = Alpha.r;
        BlockA[5] = Alpha.g;
        /*Block[0] = float3(Red[3], Green[3], Blue[3]);
        Block[1] = float3(Red[2], Green[2], Blue[2]);
        Block[4] = float3(Red[0], Green[0], Blue[0]);
        Block[5] = float3(Red[1], Green[1], Blue[1]);*/
    }
    {
        float2 UVOffset = UV + float2(2.f * TexelUVSize.x, 0);
        float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
        float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
        float4 Blue = SourceTexture.GatherBlue(TextureSampler, UVOffset);
        float4 Alpha = SourceTexture.GatherAlpha(TextureSampler, UVOffset);
        Block[2] = float3(Red.a, Green.a, Blue.a);
        Block[3] = float3(Red.b, Green.b, Blue.b);
        Block[6] = float3(Red.r, Green.r, Blue.r);
        Block[7] = float3(Red.g, Green.g, Blue.g);
        BlockA[2] = Alpha.a;
        BlockA[3] = Alpha.b;
        BlockA[6] = Alpha.r;
        BlockA[7] = Alpha.g;
        /*Block[2] = float3(Red[3], Green[3], Blue[3]);
        Block[3] = float3(Red[2], Green[2], Blue[2]);
        Block[6] = float3(Red[0], Green[0], Blue[0]);
        Block[7] = float3(Red[1], Green[1], Blue[1]);*/
    }
    {
        float2 UVOffset = UV + float2(0, 2.f * TexelUVSize.y);
        float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
        float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
        float4 Blue = SourceTexture.GatherBlue(TextureSampler, UVOffset);
        float4 Alpha = SourceTexture.GatherAlpha(TextureSampler, UVOffset);
        Block[8] = float3(Red.a, Green.a, Blue.a);
        Block[9] = float3(Red.b, Green.b, Blue.b);
        Block[12] = float3(Red.r, Green.r, Blue.r);
        Block[13] = float3(Red.g, Green.g, Blue.g);
        BlockA[8] = Alpha.a;
        BlockA[9] = Alpha.b;
        BlockA[12] = Alpha.r;
        BlockA[13] = Alpha.g;
        /*Block[8] = float3(Red[3], Green[3], Blue[3]);
        Block[9] = float3(Red[2], Green[2], Blue[2]);
        Block[12] = float3(Red[0], Green[0], Blue[0]);
        Block[13] = float3(Red[1], Green[1], Blue[1]);*/
    }
    {
        float2 UVOffset = UV + 2.f * TexelUVSize;
        float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
        float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
        float4 Blue = SourceTexture.GatherBlue(TextureSampler, UVOffset);
        float4 Alpha = SourceTexture.GatherAlpha(TextureSampler, UVOffset);
        Block[10] = float3(Red.a, Green.a, Blue.a);
        Block[11] = float3(Red.b, Green.b, Blue.b);
        Block[14] = float3(Red.r, Green.r, Blue.r);
        Block[15] = float3(Red.g, Green.g, Blue.g);
        BlockA[10] = Alpha.a;
        BlockA[11] = Alpha.b;
        BlockA[14] = Alpha.r;
        BlockA[15] = Alpha.g;
        /*Block[10] = float3(Red[3], Green[3], Blue[3]);
        Block[11] = float3(Red[2], Green[2], Blue[2]);
        Block[14] = float3(Red[0], Green[0], Blue[0]);
        Block[15] = float3(Red[1], Green[1], Blue[1]);*/
    }
}

void ReadBlockRGB(Texture2D<float4> SourceTexture, SamplerState TextureSampler, float2 UV, float2 TexelUVSize,
                  out float3 Block[16])
{
    {
        float4 Red = SourceTexture.GatherRed(TextureSampler, UV);
        float4 Green = SourceTexture.GatherGreen(TextureSampler, UV);
        float4 Blue = SourceTexture.GatherBlue(TextureSampler, UV);
        Block[0] = float3(Red.a, Green.a, Blue.a);
        Block[1] = float3(Red.b, Green.b, Blue.b);
        Block[4] = float3(Red.r, Green.r, Blue.r);
        Block[5] = float3(Red.g, Green.g, Blue.g);
        /*Block[0] = float3(Red[3], Green[3], Blue[3]);
        Block[1] = float3(Red[2], Green[2], Blue[2]);
        Block[4] = float3(Red[0], Green[0], Blue[0]);
        Block[5] = float3(Red[1], Green[1], Blue[1]);*/
    }
    {
        float2 UVOffset = UV + float2(2.f * TexelUVSize.x, 0);
        float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
        float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
        float4 Blue = SourceTexture.GatherBlue(TextureSampler, UVOffset);
        Block[2] = float3(Red.a, Green.a, Blue.a);
        Block[3] = float3(Red.b, Green.b, Blue.b);
        Block[6] = float3(Red.r, Green.r, Blue.r);
        Block[7] = float3(Red.g, Green.g, Blue.g);
        /*Block[2] = float3(Red[3], Green[3], Blue[3]);
        Block[3] = float3(Red[2], Green[2], Blue[2]);
        Block[6] = float3(Red[0], Green[0], Blue[0]);
        Block[7] = float3(Red[1], Green[1], Blue[1]);*/
    }
    {
        float2 UVOffset = UV + float2(0, 2.f * TexelUVSize.y);
        float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
        float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
        float4 Blue = SourceTexture.GatherBlue(TextureSampler, UVOffset);
        Block[8] = float3(Red.a, Green.a, Blue.a);
        Block[9] = float3(Red.b, Green.b, Blue.b);
        Block[12] = float3(Red.r, Green.r, Blue.r);
        Block[13] = float3(Red.g, Green.g, Blue.g);
        /*Block[8] = float3(Red[3], Green[3], Blue[3]);
        Block[9] = float3(Red[2], Green[2], Blue[2]);
        Block[12] = float3(Red[0], Green[0], Blue[0]);
        Block[13] = float3(Red[1], Green[1], Blue[1]);*/
    }
    {
        float2 UVOffset = UV + 2.f * TexelUVSize;
        float4 Red = SourceTexture.GatherRed(TextureSampler, UVOffset);
        float4 Green = SourceTexture.GatherGreen(TextureSampler, UVOffset);
        float4 Blue = SourceTexture.GatherBlue(TextureSampler, UVOffset);
        Block[10] = float3(Red.a, Green.a, Blue.a);
        Block[11] = float3(Red.b, Green.b, Blue.b);
        Block[14] = float3(Red.r, Green.r, Blue.r);
        Block[15] = float3(Red.g, Green.g, Blue.g);
        /*Block[10] = float3(Red[3], Green[3], Blue[3]);
        Block[11] = float3(Red[2], Green[2], Blue[2]);
        Block[14] = float3(Red[0], Green[0], Blue[0]);
        Block[15] = float3(Red[1], Green[1], Blue[1]);*/
    }
}

#pragma kernel Compress
[numthreads(8, 8, 1)]
void Compress(uint3 ThreadId : SV_DispatchThreadID)
{
    uint2 SamplePos = ThreadId.xy * 4;
    if (any(SamplePos >= _Size.xx)) { return; }

    float2 TexelUVSize = 1.0f / _Size;
    float2 SampleUV = (float2(SamplePos) + 0.5f) * TexelUVSize;
    #ifdef _COMPRESS_BC3
    float AlbedoBlockA[16];
    float3 AlbedoBlockRGB[16];
    ReadBlockRGBA(_SrcTexture, sampler_SrcTexture, SampleUV, TexelUVSize, AlbedoBlockRGB, AlbedoBlockA);

    _DstTexture[ThreadId.xy] = CompressBC3Block_SRGB(AlbedoBlockRGB, AlbedoBlockA);
    #else
    float3 AlbedoBlockRGB[16];
    ReadBlockRGB(_SrcTexture, sampler_SrcTexture, SampleUV, TexelUVSize, AlbedoBlockRGB);
    /*for (int i = 0; i < 16; ++i)
    {
        AlbedoBlockRGBA[i] *= 255.0;
    }*/
    //_DscAlbedo[ThreadId.xy] = CompressBlock_ETC2_RGBA(AlbedoBlockRGB,AlbedoBlockA);
    _DstTexture[ThreadId.xy] = UintToHalf(CompressBlock_ETC2_RGB(AlbedoBlockRGB));
    //_DstTexture[ThreadId.xy] = encode_block(AlbedoBlockRGBA);
    #endif
}
